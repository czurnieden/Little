if(typeof Math.MAX_FACTORIAL === 'undefined'){
  Math.MAX_FACTORIAL = (function(){
    var max = Number.MAX_VALUE;
    var j   = 1;
    while(max>1){max/=j;j++}
    return j-2;
  })();
}
if(typeof Math.factorial === 'undefined'){
  Math.factorial = function(n){
    if(n < 0 || (typeof n) != 'number' || parseInt(n) != n)return undefined;
    //if(n > Math.MAX_FACTORIAL)return Math.bigFactorial(n);
    if(n == 0)return 1;
    var temp =1;
    for(var i=1;i<=n;i++){
      temp = temp*i;
    }
    return temp;
  };
}

if(typeof Math.log1p === 'undefined'){
  Math.log1p = function (x) {
    return Math.log(1 + x);
  }
}

if(typeof Little === 'undefined'){
   Little = {};
}
/*
  Code for gamma and log(gamma) ported from Boost 1.56.0
*/
/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
Little.gamma_helper = (function() {
        function evaluate_rational(num, denom, z, count)
        {
          var s1, s2;
          if(z <= 1)
          {
             s1 = num[count-1];
             s2 = denom[count-1];
             for(var i = count - 2; i >= 0; --i)
             {
                s1 *= z;
                s2 *= z;
                s1 += num[i];
                s2 += denom[i];
             }
          }
          else
          {
             z = 1 / z;
             s1 = num[0];
             s2 = denom[0];
             for(var i = 1; i < count; ++i)
             {
                s1 *= z;
                s2 *= z;
                s1 += num[i];
                s2 += denom[i];
             }
          }
          return s1 / s2;
        };
    return {
        epsilon          : 2.220446049250313080847263336e-16,
        root_epsilon     : 0.1490116119384765625e-7,
        max_value        : 1.79769e+308,
        log_max_value    : 709.0,
        euler            : 5.772156649015328606065120900824024310e-01,
        lanczos_sum      : function(z)
        {
             var num = [
               23531376880.41075968857200767445163675473,
               42919803642.64909876895789904700198885093,
               35711959237.35566804944018545154716670596,
               17921034426.03720969991975575445893111267,
               6039542586.35202800506429164430729792107,
               1439720407.311721673663223072794912393972,
               248874557.8620541565114603864132294232163,
               31426415.58540019438061423162831820536287,
               2876370.628935372441225409051620849613599,
               186056.2653952234950402949897160456992822,
               8071.672002365816210638002902272250613822,
               210.8242777515793458725097339207133627117,
               2.506628274631000270164908177133837338626
             ];

             var denom = [
               0,
               39916800,
               120543840,
               150917976,
               105258076,
               45995730,
               13339535,
               2637558,
               357423,
               32670,
               1925,
               66,
               1
             ];
             return evaluate_rational(num, denom, z, num.length);
        },

        lanczos_sum_expG_scaled: function(z)
        {
             var num = [
               56906521.91347156388090791033559122686859,
               103794043.1163445451906271053616070238554,
               86363131.28813859145546927288977868422342,
               43338889.32467613834773723740590533316085,
               14605578.08768506808414169982791359218571,
               3481712.15498064590882071018964774556468,
               601859.6171681098786670226533699352302507,
               75999.29304014542649875303443598909137092,
               6955.999602515376140356310115515198987526,
               449.9445569063168119446858607650988409623,
               19.51992788247617482847860966235652136208,
               0.5098416655656676188125178644804694509993,
               0.006061842346248906525783753964555936883222
             ];

             var denom = [
               0,
               39916800,
               120543840,
               150917976,
               105258076,
               45995730,
               13339535,
               2637558,
               357423,
               32670,
               1925,
               66,
               1
             ];
             return evaluate_rational(num, denom, z, num.length) ;
        },
        lanczos_sum_near_1: function(dz)
        {
             var d = [
               2.208709979316623790862569924861841433016,
               -3.327150580651624233553677113928873034916,
               1.483082862367253753040442933770164111678,
               -0.1993758927614728757314233026257810172008,
               0.004785200610085071473880915854204301886437,
               -0.1515973019871092388943437623825208095123e-5,
               -0.2752907702903126466004207345038327818713e-7,
               0.3075580174791348492737947340039992829546e-7,
               -0.1933117898880828348692541394841204288047e-7,
               0.8690926181038057039526127422002498960172e-8,
               -0.2499505151487868335680273909354071938387e-8,
               0.3394643171893132535170101292240837927725e-9
            ];
            var result = 0;
            for(var  k = 1; k <= d.length; ++k)
            {
               result += (-d[k-1]*dz)/(k*dz + k*k);
            }
            return result;
        },
        lanczos_sum_near_2: function(dz)
        {
            var d = [
              6.565936202082889535528455955485877361223,
              -9.8907772644920670589288081640128194231,
              4.408830289125943377923077727900630927902,
              -0.5926941084905061794445733628891024027949,
              0.01422519127192419234315002746252160965831,
              -0.4506604409707170077136555010018549819192e-5,
              -0.8183698410724358930823737982119474130069e-7,
              0.9142922068165324132060550591210267992072e-7,
              -0.5746670642147041587497159649318454348117e-7,
              0.2583592566524439230844378948704262291927e-7,
              -0.7430396708998719707642735577238449585822e-8,
              0.1009141566987569892221439918230042368112e-8,
            ];
            var result = 0;
            var z = dz + 2;
            for(var k = 1; k <= d.length; ++k)
            {
               result += (-d[k-1]*dz)/(z + k*z + k*k - 1);
            }
            return result;
        },
        g: function(){ return 6.024680040776729583740234375; },
        sinpx: function( z)
        {
            // Ad hoc function calculates x * sin(pi * x),
            // taking extra care near when x is near a whole number.
            var sign = 1;
            if(z < 0)
            {         
               z = -z;
            }
            else
            {
               sign = -sign;
            }
            var fl = Math.floor(z);
            var dist;
            if(Math.abs(fl)%2 == 1)
            {
               fl += 1;
               dist = fl - z;
               sign = -sign;
            }
            else
            {
               dist = z - fl;
            }
            if(dist > 0.5)
               dist = 1 - dist;
            var result = Math.sin(dist*Math.PI);
            return sign*z*result;
         },
         sign: function(x){
            return (x<0)?-1:1;
         },
         lgamma_small: function(z, zm1, zm2)
         {
            var result = 0;
            if(z < Little.gamma_helper.epsilon)
            {
               result = -Math.log(z);
            }
            else if(z < 0.5)
            {
               // taking the log of tgamma reduces the error, no danger of overflow here:
               result = Math.log(gamma(z));
            }
            else if(z >= 3)
            {
               // taking the log of tgamma reduces the error, no danger of overflow here:
               result = Math.log(gamma(z));
            }
            else if(z >= 1.5)
            {
               // special case near 2:
               var dz = zm2;
               result = dz * Math.log((z + Little.gamma_helper.g() - 0.5) / Math.E);
               result += Math.log1p(dz / (Little.gamma_helper.g() + (1.5))) * (1.5);
               result += Math.log1p(Little.gamma_helper.lanczos_sum_near_2(dz));
            }
            else
            {
               // special case near 1:
               var dz = zm1;
               result = dz * Math.log((z + Little.gamma_helper.g() - (0.5)) / Math.E);
               result += Math.log1p(dz / (Little.gamma_helper.g() + (0.5))) / 2;
               result += Math.log1p(Little.gamma_helper.lanczos_sum_near_1(dz));
            }         
            return result;
         }
    };
})();

function lgamma(z){
   var result = 0;
   var sresult = 1 | 0;


   if(z <= -Little.gamma_helper.root_epsilon)
   {
      // reflection formula:
      if(Math.floor(z) == z)
         return Infinity;

      var t = Little.gamma_helper.sinpx(z);
      z = -z;
      if(t < 0)
      {
         t = -t;
      }
      else
      {
         sresult = -sresult;
      }
      result = Math.log(Math.PI) - lgamma(z) - Math.log(t);
   }

   else if (z < Little.gamma_helper.root_epsilon)
   {
      if (0 == z)
		   return Infinity;
      if (Math.abs(z) < 1 / Little.gamma_helper.max_value)
         result = -Math.log(Math.abs(z));
      else
	      result = Math.log( Math.abs(1 / z - Little.gamma_helper.euler)  );
	   if (z < 0)
		sresult = -1;
   }

   else if(z < 15)
   {
      result = lgamma_small(z, (z - 1), (z - 2));
   }


   else if((z >= 3) && (z < 100) )
   {
      // taking the log of tgamma reduces the error, no danger of overflow here:
      result = Math.log(gamma(z));
   }



   else
   {
      // regular evaluation:
      var zgh = (z + Little.gamma_helper.g() - 0.5);
      result = Math.log(zgh) - 1;
      result *= z - 0.5;
      result += Math.log(Little.gamma_helper.lanczos_sum_expG_scaled(z));
   }

   if(sign)
      sign = sresult;
   return result;
}



function lgamma_small(z, zm1, zm2)
{

   var result = 0;
   if(z < Little.gamma_helper.epsilon)
   {
      result = -Math.log(z);
   }
   else if(z < 0.5)
   {
      // taking the log of tgamma reduces the error, no danger of overflow here:
      result = Math.log(gamma(z));
   }
   else if(z >= 3)
   {
      // taking the log of tgamma reduces the error, no danger of overflow here:
      result = Math.log(gamma(z));
   }
   else if(z >= 1.5)
   {
      // special case near 2:
      var dz = zm2;
      result = dz * Math.log((z + Little.gamma_helper.g() - 0.5) / Math.E);
      result += Math.log1p(dz / (Little.gamma_helper.g() + (1.5))) * (1.5);
      result += Math.log1p(Little.gamma_helper.lanczos_sum_near_2(dz));
   }
   else
   {
      // special case near 1:
      var dz = zm1;
      result = dz * Math.log((z + Little.gamma_helper.g() - (0.5)) / Math.E);
      result += Math.log1p(dz / (Little.gamma_helper.g() + (0.5))) / 2;
      result += Math.log1p(Little.gamma_helper.lanczos_sum_near_1(dz));
   }
   return result;
}





function gamma(z)
{
   var result = 1;

   if(z <= 0)
   {
      if(Math.floor(z) == z)
         return Infinity;
      if(z <= -20)
      {
         result = gamma((-z)) * Little.gamma_helper.sinpx(z);
         
         if( (Math.abs(result) < 1) && (Little.gamma_helper.max_value * Math.abs(result) < Math.PI ) )
            return -sign(result) * Infinity;
         result = -Math.PI / result;
         if(result == 0)
            return 0;
         /*
         We don't care. Or shall we?
         if((boost::math::fpclassify)(result) == (int)FP_SUBNORMAL)
            return policies::raise_denorm_error<T>(function, "Result of tgamma is denormalized.", result, pol);
         */
         return result;
      }

      // shift z to > 1:
      while(z < 0)
      {
         result /= z;
         z += 1;
      }
   }
   if((Math.floor(z) == z) && (z < Math.MAX_FACTORIAL))
   {
      result *= Math.factorial( z - 1 );
   }
   else if (z < Little.gamma_helper.root_epsilon)
   {
      if (z < 1 / Little.gamma_helper.max_value)
         result = Infinity;
      result *= 1 / z - Little.gamma_helper.euler;
   }
   else
   {
      result *= Little.gamma_helper.lanczos_sum(z);
      var zgh = (z + (Little.gamma_helper.g()) - 0.5);
      var lzgh = Math.log(zgh);
      if(z * lzgh > Little.gamma_helper.log_max_value)
      {
         // we're going to overflow unless this is done with care:
         if(lzgh * z / 2 > Little.gamma_helper.log_max_value)
            return sign(result) * Infinity;
         var hp = Math.pow(zgh, (z / 2) - (0.25));
         result *= hp / Math.exp(zgh);
         if(Little.gamma_helper.max_value / hp < result)
            return sign(result) * Infinity;
         result *= hp;
      }
      else
      {
         result *= Math.pow(zgh, z - 0.5) / Math.exp(zgh);
      }
   }
   return result;
}
/*
console.log(lgamma(-0.15e-7)  +"\n "+ 18.01521564450243624874399530+"\n")
console.log(lgamma(-3)        +"\n "+ Infinity+"\n")
console.log(lgamma(0.13e-7)   +"\n "+ 18.15831647198107091538543623+"\n")
console.log(lgamma(0)         +"\n "+ Infinity+"\n")
console.log(lgamma(5e-309)    +"\n "+ 709.8893558227260159869586002+"\n")
console.log(lgamma(2.4)       +"\n "+ 0.2168593224488416318658021609+"\n")
console.log(lgamma(17.4)      +"\n "+ 31.79807376356760260999377617+"\n")
console.log(lgamma(256.4)     +"\n "+ 1163.929703285443580717103467+"\n")

console.log(lgamma( 2.05e-16) +"\n "+ 36.12352169475441413385632348+"\n")
console.log(lgamma(0.4)       +"\n "+ 0.7966778177017837665447359624+"\n")
console.log(lgamma(4.4)       +"\n "+ 2.316103491424857273143527592+"\n")
    values around 1 and around 2 are quite a bit off 
console.log(lgamma(1.9999999) +"\n "+ -0.00000004227843028517631234590915834+"\n")
console.log(lgamma(.9999999)  +"\n "+ 0.00000005772157471482402098209663008+"\n")
console.log(lgamma(1.0000001) +"\n "+ -0.00000005772155826548335250512447742+"\n")
console.log(gamma(11)         +"\n "+ 3628800+"\n")
console.log(gamma(-3)         +"\n "+ Infinity+"\n")
console.log(gamma(-30.4)      +"\n "+ -3.165349519516958868543752582e-33+"\n")
console.log(gamma(-15.4)      +"\n "+ 8.395748577129902107647648520e-13+"\n")
console.log(gamma(0.13e-7)    +"\n "+ 76923076.34586127103311800222+"\n")
console.log(gamma(5e-309)     +"\n "+ Infinity +"\n")
console.log(gamma(12.4)       +"\n "+ 106776191.452949012790352097+"\n")
*/
